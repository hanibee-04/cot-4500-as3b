import numpy as np

def gaussian_elimination(matrix):
    n = len(matrix)
    A = matrix.astype(float)

    for i in range(n):
        for j in range(i+1, n):
            ratio = A[j][i] / A[i][i]
            A[j, i:] -= ratio * A[i, i:]

    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = (A[i, -1] - np.dot(A[i, i+1:n], x[i+1:])) / A[i][i]
    return x

def lu_decomposition(matrix):
    n = matrix.shape[0]
    L = np.eye(n)
    U = matrix.astype(float).copy()

    for i in range(n):
        for j in range(i+1, n):
            factor = U[j][i] / U[i][i]
            L[j][i] = factor
            U[j, i:] -= factor * U[i, i:]

    det = np.prod(np.diag(U))
    return det, L, U

def is_diagonally_dominant(matrix):
    for i in range(len(matrix)):
        row_sum = sum(abs(matrix[i][j]) for j in range(len(matrix)) if j != i)
        if abs(matrix[i][i]) < row_sum:
            return False
    return True

def is_positive_definite(matrix):
    return np.all(np.linalg.eigvals(matrix) > 0)

def test_all():
    # Q1
    q1_matrix = np.array([[2.0, 1.0, -1.0, 8.0],
                          [-3.0, -1.0, 2.0, -11.0],
                          [-2.0, 1.0, 2.0, -3.0]])
    print("Q1 Result:", gaussian_elimination(q1_matrix))

    # Q2
    q2_matrix = np.array([[1, 1, 0, 3],
                          [2, 1, -1, 1],
                          [3, -1, -1, 2],
                          [-1, 2, 3, -1]])
    det, L, U = lu_decomposition(q2_matrix)
    print("Q2 Determinant:", det)
    print("Q2 L Matrix:\n", L)
    print("Q2 U Matrix:\n", U)

    # Q3
    q3_matrix = np.array([[9, 0, 5, 2, 1],
                          [3, 9, 1, 2, 1],
                          [0, 1, 7, 2, 3],
                          [4, 2, 3, 12, 2],
                          [3, 2, 4, 0, 8]])
    print("Q3 Diagonally Dominant:", is_diagonally_dominant(q3_matrix))

    # Q4
    q4_matrix = np.array([[2, 2, 1],
                          [2, 3, 0],
                          [1, 0, 2]])
    print("Q4 Positive Definite:", is_positive_definite(q4_matrix))

if __name__ == "__main__":
    test_all()
